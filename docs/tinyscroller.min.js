const t={OUTER_CONTAINER:"tinyscroller__outercontainer",INNER_CONTAINER:"tinyscroller__innercontainer",IMAGE_CONTAINER:"tinyscroller__imgcontainer",IMAGE:"tinyscroller__image"},i={orientation:"horizontal",fit:"cover"};export class Tinyscroller{constructor(e,n=i){if(Tinyscroller.validateOptions(n),e instanceof Element)this.outerContainer=e;else{if("string"!=typeof e)throw new Error("The target provided to the Tinyscroller constructor does not appear to be either a valid DOM element nor a CSS selector string.");this.outerContainer=document.querySelector(e)}this.innerContainer=document.createElement("div"),this.options={...i,...n},this.images=[],this.outerContainer.appendChild(this.innerContainer),this.outerContainer.classList.add(t.OUTER_CONTAINER),this.innerContainer.classList.add(t.INNER_CONTAINER),void 0!==this.options.orientation&&this.innerContainer.classList.add(`${t.INNER_CONTAINER}--orientation-${this.options.orientation}`),void 0!==this.options.fit&&this.images.forEach((i=>{i.classList.add(`${t.IMAGE}--fit-${this.options.fit}`)}))}static validateOptions(t){if(!["horizontal","vertical",void 0].includes(t?.orientation))throw new Error(`Tinyscroller options 'orientation' field was expected to be either 'horizontal', 'vertical', or undefined, but instead received: ${t.orientation}.`);if(!["contain","cover","fill",void 0].includes(t?.fit))throw new Error(`Tinyscroller options 'fit' field was expected to be either 'contain', 'cover', 'fill', or undefined, but instead received: ${t.fit}.`)}addImages(...i){for(let e of i){if("string"==typeof e){const t=e;e=document.createElement("img"),e.src=t}else if(!(e instanceof HTMLImageElement))throw new Error("An invalid object was provided to TinyScroller#addImages");this.images.push(e);const i=document.createElement("div");e.classList.add(t.IMAGE),void 0!==this.options.fit&&e.classList.add(`${t.IMAGE}--fit-${this.options.fit}`),i.classList.add(t.IMAGE_CONTAINER),i.appendChild(e),this.innerContainer.append(i)}}}